import java.io.*;
import java.net.*;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import com.jcraft.jsch.*;

public class TraceLateReportServer {
    private static final int PORT = 68412;
    private static long bytesIn = 0, bytesOut = 0;
    private static boolean quit = false;
    private static String basePath;
    private static String sys;
    private static Connection dbh;
    private static PrintWriter logFileH;
    private static String logFile;

    public static void main(String[] args) {
        // Handle signals (not directly translatable to Java)
        Runtime.getRuntime().addShutdownHook(new Thread() {
            public void run() {
                warningHandler("Shutting down");
            }
        });

        // Parse command line arguments
        String processName = null;
        for (int i = 0; i < args.length; i++) {
            if (args[i].equals("-h") || args[i].equals("--help")) {
                System.out.println(help());
                System.exit(0);
            } else if (args[i].equals("-l")) {
                logFile = args[++i];
            } else if (args[i].startsWith("--processName=")) {
                processName = args[i].substring("--processName=".length());
            } else if (args[i].startsWith("--basePath=")) {
                basePath = args[i].substring("--basePath=".length());
            }
        }

        // Determine system and base path
        String whoami = System.getProperty("user.name");
        String hostName;
        try {
            hostName = InetAddress.getLocalHost().getHostName();
        } catch (UnknownHostException e) {
            hostName = "unknown";
        }

        if (whoami.equals("prod") && hostName.contains("wrpra")) {
            sys = "bcp";
        } else {
            // Extract system from username (firtXXXX)
            if (whoami.startsWith("firt")) {
                sys = whoami.substring(4);
            } else {
                System.err.println("You must use a 'firtXXXX' account. You are currently: " + whoami);
                System.exit(1);
            }
        }

        if (basePath == null) {
            basePath = "/opt/streets/" + sys;
        }

        // Load properties file
        String propFileName = basePath + "/bin/tcs-db/properties/jdbc." + sys + ".properties";
        Properties props = new Properties();
        try {
            props.load(new FileInputStream(propFileName));
        } catch (IOException e) {
            System.err.println("Can't open file: " + propFileName + " for input.\n" + e.getMessage());
            System.exit(1);
        }

        // Initialize environment variables
        initEnv(props);

        // Database connection
        String sybUser = props.getProperty("FISTS_DB_USER");
        String sybPassword = props.getProperty("FISTS_DB_PW");
        String sybDsn = props.getProperty("SYBASE_DBI");

        try {
            dbh = DriverManager.getConnection(sybDsn, sybUser, sybPassword);
            dbh.setAutoCommit(true);
        } catch (SQLException e) {
            System.err.println("Database connection failed: " + e.getMessage());
            System.exit(1);
        }

        // Start server
        int port = args.length > 0 ? Integer.parseInt(args[0]) : PORT;
        try (ServerSocket serverSocket = new ServerSocket(port)) {
            serverSocket.setSoTimeout(120000); // 2 minute timeout
            System.err.println(getTimestamp() + " Waiting for connections on port " + port);

            while (!quit) {
                try (Socket session = serverSocket.accept();
                     BufferedReader in = new BufferedReader(new InputStreamReader(session.getInputStream()));
                     PrintWriter out = new PrintWriter(session.getOutputStream(), true)) {

                    String peer = session.getInetAddress().getHostName();
                    int clientPort = session.getPort();
                    System.err.println(getTimestamp() + " Connection from [" + peer + ", " + clientPort + "]");

                    String line;
                    while ((line = in.readLine()) != null) {
                        String[] command = line.split("\\|");
                        if (command.length == 0) continue;

                        String cmd = trim(command[0]);
                        if (cmd.equals("getTradingDate")) {
                            String rptDate = command.length > 1 ? trim(command[1]) : "";
                            rptDate = getTradingDate(dbh, rptDate);
                            out.println(rptDate + "\r\n");
                        } else if (cmd.equalsIgnoreCase("hi")) {
                            out.println("Hello\r\n");
                        } else if (cmd.equals("getNasdaqFile")) {
                            if (command.length > 1) {
                                String fileName = trim(command[1]);
                                String fileToGet = props.getProperty("FINRA_DATA_DIR") + "/" + fileName;
                                String destFileName = basePath + "/" + props.getProperty("LATE_RPT_DIR") + "/" + fileName;

                                try {
                                    // SFTP transfer
                                    JSch jsch = new JSch();
                                    Session sftpSession = jsch.getSession(props.getProperty("FINRA_SFTP_ACCESS"));
                                    sftpSession.setPassword(props.getProperty("FINRA_PW"));
                                    sftpSession.setConfig("StrictHostKeyChecking", "no");
                                    sftpSession.connect(8000); // 8 second timeout

                                    ChannelSftp channel = (ChannelSftp) sftpSession.openChannel("sftp");
                                    channel.connect();
                                    channel.get(fileToGet, destFileName);
                                    channel.disconnect();
                                    sftpSession.disconnect();

                                    // Unzip file
                                    String fileBaseName = fileName.substring(0, fileName.lastIndexOf('.'));
                                    String unzipFileName = basePath + "/" + props.getProperty("LATE_RPT_DIR") + "/" + fileBaseName + ".csv";
                                    unzipFile(destFileName, unzipFileName);

                                    // Delete zip file
                                    new File(destFileName).delete();

                                    // Send file contents
                                    out.println("OK\r\n");
                                    try (BufferedReader fileReader = new BufferedReader(new FileReader(unzipFileName))) {
                                        String fileLine;
                                        while ((fileLine = fileReader.readLine()) != null) {
                                            out.println(fileLine);
                                        }
                                    }
                                } catch (Exception e) {
                                    System.err.println(getTimestamp() + " Error: " + e.getMessage());
                                    out.println("Error: " + e.getMessage() + "\r\n");
                                    break;
                                }
                            } else {
                                out.println("File not found!\r\n");
                                break;
                            }
                        } else if (cmd.equals("getTemplate")) {
                            String oldcwd = System.getProperty("user.dir");
                            System.setProperty("user.dir", basePath + "/" + props.getProperty("LATE_RPT_DIR"));
                            
                            File dir = new File(".");
                            File[] files = dir.listFiles((d, name) -> name.startsWith("Trace") && name.endsWith(".xlsx"));
                            if (files != null && files.length > 0) {
                                Arrays.sort(files, Comparator.comparingLong(File::lastModified).reversed());
                                File fileToDownload = files[0];
                                
                                try (FileInputStream fis = new FileInputStream(fileToDownload);
                                     BufferedInputStream bis = new BufferedInputStream(fis)) {
                                    out.println("OK\r\n");
                                    byte[] buffer = new byte[8192];
                                    int count;
                                    while ((count = bis.read(buffer)) > 0) {
                                        session.getOutputStream().write(buffer, 0, count);
                                    }
                                }
                            }
                            System.setProperty("user.dir", oldcwd);
                            break;
                        } else if (cmd.equals("putTemplateFile")) {
                            if (command.length > 1) {
                                String localFileName = basePath + "/" + props.getProperty("LATE_RPT_DIR") + "/" + 
                                    props.getProperty("TEMPLATE_NAME") + "." + getDottedTimestamp() + ".xlsx";
                                
                                try (FileOutputStream fos = new FileOutputStream(localFileName);
                                     BufferedOutputStream bos = new BufferedOutputStream(fos)) {
                                    byte[] buffer = new byte[8192];
                                    int count;
                                    while ((count = session.getInputStream().read(buffer)) > 0) {
                                        bos.write(buffer, 0, count);
                                    }
                                    System.err.println(getTimestamp() + " Template uploaded. Server file name " + localFileName);
                                } catch (Exception e) {
                                    System.err.println(getTimestamp() + " Error uploading excel template " + command[1] + ": " + e.getMessage());
                                    break;
                                }
                            }
                            break;
                        } else if (cmd.equals("getTradeDetails")) {
                            if (command.length > 1) {
                                String[] parts = trim(command[1]).split("\\|");
                                String ticketNumber = parts.length > 0 ? parts[0] : "";
                                String controlNumber = parts.length > 1 ? parts[1] : "";
                                String tradingDate = parts.length > 2 ? parts[2] : "";
                                
                                String response = getTradeDetails(ticketNumber, controlNumber, tradingDate);
                                out.println(response + "\r\n");
                            }
                        } else {
                            out.println(getTimestamp() + " Unknown Command\r\n");
                            break;
                        }
                    }
                } catch (SocketTimeoutException e) {
                    // Timeout, continue waiting for connections
                } catch (IOException e) {
                    System.err.println(getTimestamp() + " Connection error: " + e.getMessage());
                }
            }
        } catch (IOException e) {
            System.err.println("Can't create socket: " + e.getMessage());
            System.exit(1);
        }
    }

    private static void warningHandler(String message) {
        System.err.println(getTimestamp() + " WARNING: " + message);
    }

    private static void initEnv(Properties props) {
        // Initialize environment variables from properties
        // This is a simplified version - in Java we typically use the Properties object directly
    }

    private static String getTradeDetails(String ticketNumber, String controlNumber, String tradingDate) {
        if (ticketNumber == null || ticketNumber.isEmpty() || ticketNumber.matches(".*\\D.*")) {
            ticketNumber = "0";
        }
        
        if (ticketNumber.startsWith("Alta")) {
            controlNumber = ticketNumber;
        }

        int recordCount = 0;
        List<String[]> results = new ArrayList<>();
        
        try {
            if (!ticketNumber.equals("0")) {
                String query = "select substring(positionGroupShortDesc,1,4), " +
                    "ug.userGroupShortName, u.firstName, u.lastName, uu.firstName, uu.lastName, " +
                    "t.mpid, t.importSource, f.tradeNumber, t.tradeDate " +
                    "from intradaytrades..ExtTradeFips f, intradaytrades..Trade t, " +
                    "intradaytrades..Users u, intradaytrades..Users uu, " +
                    "intradaytrades..PositionGroups pg, intradaytrades..UserGroups ug " +
                    "where f.ticketNumber = ? and t.ticketNumber = f.ticketNumber " +
                    "and t.traderId = u.userId and t.positionGroupId = pg.positionGroupId " +
                    "and pg.userGroupId = ug.userGroupId and t.salesRepId = uu.userId " +
                    "and tradeDate <= ? order by t.tradeDate desc";
                
                try (PreparedStatement stmt = dbh.prepareStatement(query)) {
                    stmt.setString(1, ticketNumber);
                    stmt.setString(2, tradingDate);
                    ResultSet rs = stmt.executeQuery();
                    
                    while (rs.next()) {
                        String[] row = new String[10];
                        for (int i = 0; i < 10; i++) {
                            row[i] = rs.getString(i + 1);
                        }
                        results.add(row);
                    }
                }
                
                recordCount = results.size();
            }

            if ((recordCount == 0 || ticketNumber.equals("0")) && !controlNumber.isEmpty()) {
                String query = "select top 1 substring(positionGroupShortDesc,1,4), " +
                    "ug.userGroupShortName, u.firstName, u.lastName, uu.firstName, uu.lastName, " +
                    "t.mpid, t.importSource, f.tradeNumber, t.tradeDate " +
                    "from intradaytrades..ExtTradeFips f, intradaytrades..Trade t, " +
                    "intradaytrades..Users u, intradaytrades..Users uu, " +
                    "intradaytrades..PositionGroups pg, intradaytrades..UserGroups ug " +
                    "where f.tradeNumber = ? and t.ticketNumber = f.ticketNumber " +
                    "and t.traderId = u.userId and t.positionGroupId = pg.positionGroupId " +
                    "and pg.userGroupId = ug.userGroupId and t.salesRepId = uu.userId " +
                    "and tradeDate <= ? order by t.tradeDate desc";
                
                try (PreparedStatement stmt = dbh.prepareStatement(query)) {
                    stmt.setString(1, controlNumber);
                    stmt.setString(2, tradingDate);
                    ResultSet rs = stmt.executeQuery();
                    
                    results.clear();
                    while (rs.next()) {
                        String[] row = new String[10];
                        for (int i = 0; i < 10; i++) {
                            row[i] = rs.getString(i + 1);
                        }
                        results.add(row);
                    }
                }
                
                recordCount = results.size();
            }

            if (recordCount != 1) return "";

            String[] row = results.get(0);
            String inv = row[0] != null ? row[0] : "";
            String desk = row[1] != null ? row[1] : "";
            String traderF = row[2] != null ? row[2] : "";
            String traderL = row[3] != null ? row[3] : "";
            String salesF = row[4] != null ? row[4] : "";
            String salesL = row[5] != null ? row[5] : "";
            String mpid = row[6] != null ? row[6] : "";
            String origin = row[7] != null ? row[7] : "";
            String tradeNumber = row[8] != null ? row[8] : "";

            // Format trader and sales names
            String trader = "", sales = "";
            if (!traderF.isEmpty()) {
                trader = traderF.substring(0, 1) + ". " + traderL;
            }
            if (!salesF.isEmpty()) {
                sales = salesF.substring(0, 1) + ". " + salesL;
            }

            return inv + " " + trader + " " + sales + " " + mpid + " " + origin + " " + tradeNumber;
        } catch (SQLException e) {
            System.err.println("Database error: " + e.getMessage());
            return "";
        }
    }

    private static int getTradingDateDifference(String date1, String date2) {
        // Implement date difference calculation considering holidays and weekends
        // This is a complex function that would need proper implementation
        return 0;
    }

    private static String getTradingDate(Connection dbh, String deltaStr) {
        // Implement trading date calculation considering holidays and weekends
        // This is a complex function that would need proper implementation
        return new SimpleDateFormat("MM/dd/yyyy").format(new Date());
    }

    private static void unzipFile(String zipFile, String outputFile) throws IOException {
        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFile));
            FileOutputStream fos = new FileOutputStream(outputFile)) {
            ZipEntry entry = zis.getNextEntry();
            if (entry != null) {
                byte[] buffer = new byte[1024];
                int len;
                while ((len = zis.read(buffer)) > 0) {
                    fos.write(buffer, 0, len);
                }
            }
        }
    }

    private static String getDottedTimestamp() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss");
        return sdf.format(new Date());
    }

    private static String getTimestamp() {
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        return sdf.format(new Date());
    }

    private static String trim(String s) {
        return s != null ? s.trim() : "";
    }

    private static String help() {
        return "Usage: java TraceLateReportServer [options]\n" +
               "Options:\n" +
               "  -h, --help          Show this help message\n" +
               "  -l <file>           Log file\n" +
               "  --processName=<name> Process name\n" +
               "  --basePath=<path>   Base path\n";
    }
}