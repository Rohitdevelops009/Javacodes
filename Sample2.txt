import org.apache.flink.api.common.functions.RichFlatMapFunction;
import org.apache.flink.api.common.state.ValueState;
import org.apache.flink.api.common.state.ValueStateDescriptor;
import org.apache.flink.api.common.typeinfo.TypeHint;
import org.apache.flink.api.common.typeinfo.TypeInformation;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.util.Collector;
import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;
import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer;
import org.apache.flink.streaming.util.serialization.JSONKeyValueDeserializationSchema;

import java.util.Properties;

public class TradeNotionalAggregator {

    public static void main(String[] args) throws Exception {
        // Set up the execution environment
        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

        // Kafka configuration (assuming trades are coming from Kafka)
        Properties properties = new Properties();
        properties.setProperty("bootstrap.servers", "localhost:9092");
        properties.setProperty("group.id", "trade-notional-aggregator");

        // Create Kafka consumer
        FlinkKafkaConsumer<JsonNode> kafkaConsumer = new FlinkKafkaConsumer<>(
                "trades-topic",
                new JSONKeyValueDeserializationSchema(false),
                properties
        );

        // Add the source to the execution environment
        DataStream<JsonNode> trades = env.addSource(kafkaConsumer);

        // Parse and process trades
        DataStream<Tuple2<String, Double>> notionalByCusip = trades
                .flatMap(new TradeParser())
                .keyBy(0) // Key by CUSIP
                .flatMap(new NotionalAggregator());

        // Print the results (for debugging/demo purposes)
        notionalByCusip.print();

        // Execute the job
        env.execute("Trade Notional Aggregation");
    }

    // Parses the trade JSON into (CUSIP, Notional) tuples
    public static class TradeParser extends RichFlatMapFunction<JsonNode, Tuple2<String, Double>> {
        private transient ObjectMapper mapper;

        @Override
        public void open(Configuration parameters) throws Exception {
            mapper = new ObjectMapper();
        }

        @Override
        public void flatMap(JsonNode tradeJson, Collector<Tuple2<String, Double>> out) throws Exception {
            try {
                String tradeNumber = tradeJson.get("tradeNumber").asText();
                double notional = tradeJson.get("notional").asDouble();
                String cusip = tradeJson.get("cusip").asText();

                out.collect(new Tuple2<>(cusip, notional));
            } catch (Exception e) {
                System.err.println("Failed to parse trade: " + tradeJson);
            }
        }
    }

    // Aggregates notional values by CUSIP (stateful operation)
    public static class NotionalAggregator extends RichFlatMapFunction<Tuple2<String, Double>, Tuple2<String, Double>> {
        private transient ValueState<Double> totalNotionalState;

        @Override
        public void open(Configuration parameters) throws Exception {
            // Initialize state
            ValueStateDescriptor<Double> descriptor =
                    new ValueStateDescriptor<>(
                            "totalNotional", // state name
                            TypeInformation.of(new TypeHint<Double>() {}),
                            0.0); // default value
            totalNotionalState = getRuntimeContext().getState(descriptor);
        }

        @Override
        public void flatMap(Tuple2<String, Double> trade, Collector<Tuple2<String, Double>> out) throws Exception {
            // Access the current state
            Double currentTotal = totalNotionalState.value();
            
            // Update the state with the new trade's notional
            Double newTotal = currentTotal + trade.f1;
            totalNotionalState.update(newTotal);
            
            // Emit the updated total
            out.collect(new Tuple2<>(trade.f0, newTotal));
        }
    }
}